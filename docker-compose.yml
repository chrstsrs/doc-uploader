services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      # allow 'ruok' so healthcheck won't hang
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=ruok,stat"
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "bash", "-lc", "echo ruok | timeout 3 nc -w 2 localhost 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 20

  kafka:
    image: confluentinc/cp-kafka:7.7.1
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"    # host access (for tools on your laptop)
      - "29092:29092"  # internal access (for containers)
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      # two listeners: internal (PLAINTEXT on 29092) & host (PLAINTEXT_HOST on 9092)
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      # single-node safe defaults
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

    # healthcheck that probes the INTERNAL listener (29092)
    healthcheck:
      test: ["CMD", "bash", "-lc", "kafka-broker-api-versions --bootstrap-server localhost:29092 >/dev/null 2>&1"]
      interval: 10s
      timeout: 10s
      retries: 30
      start_period: 30s

  uploader:
    build: ./uploader
    env_file: .env
    environment:
      KAFKA_BOOTSTRAP: kafka:29092
    volumes: [ "./uploader/data:/data" ]
    ports: [ "8000:8000" ]
    depends_on:
      kafka:
        condition: service_healthy

  processor:
    build: ./processor
    env_file: .env
    environment:
      KAFKA_BOOTSTRAP: kafka:29092
    volumes: [ "./processor/data:/data" ]
    depends_on:
      kafka:
        condition: service_healthy

  notifier:
    build: ./notifier
    env_file: .env
    environment:
      KAFKA_BOOTSTRAP: kafka:29092
    volumes: [ "./notifier/data:/data" ]
    depends_on:
      kafka:
        condition: service_healthy
